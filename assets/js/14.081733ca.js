(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{280:function(v,a,_){"use strict";_.r(a);var e=_(13),r=Object(e.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("ul",[a("li",[v._v("Encapsulation"),a("br"),v._v("\n可见性private")]),v._v(" "),a("li",[v._v("Inheritance")]),v._v(" "),a("li",[v._v("Polymorphism")])]),v._v(" "),a("p",[v._v("类, 抽象类/方法, Interface")]),v._v(" "),a("h2",{attrs:{id:"inheritance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inheritance"}},[v._v("#")]),v._v(" Inheritance")]),v._v(" "),a("ul",[a("li",[v._v("单继承")]),v._v(" "),a("li",[v._v("多继承")]),v._v(" "),a("li",[v._v("多子类继承")]),v._v(" "),a("li",[v._v("多(父类)继承, Java不支持, 容易造成致命方块.")])]),v._v(" "),a("p",[v._v("提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。")]),v._v(" "),a("p",[v._v("实际上, 在保证无歧义的情况下, 继承是树状结构. 但现实生活中存在网状结构, Java用接口的方式实现了多父类继承的概念, 但是要求你一定要单独给出实现, 避免了歧义.")]),v._v(" "),a("p",[v._v("如何取得子类和父类:")]),v._v(" "),a("ul",[a("li",[v._v("super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。")]),v._v(" "),a("li",[v._v("this关键字：指向自己的引用。")])]),v._v(" "),a("h2",{attrs:{id:"override"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#override"}},[v._v("#")]),v._v(" Override")]),v._v(" "),a("p",[v._v("外壳不变，核心重写")]),v._v(" "),a("h2",{attrs:{id:"overload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overload"}},[v._v("#")]),v._v(" Overload")]),v._v(" "),a("p",[v._v("就是函数或者方法有相同的名称，但是参数列表不相同的情形")]),v._v(" "),a("h2",{attrs:{id:"generics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generics"}},[v._v("#")]),v._v(" Generics")]),v._v(" "),a("p",[v._v("泛型的本质是为了参数化类型（在不创建新的类型的情况下，通过泛型指定的不同类型来控制形参具体限制的类型）。也就是说在泛型使用过程中，操作的数据类型被指定为一个参数，这种参数类型可以用在类、接口和方法中，分别被称为泛型类、泛型接口、泛型方法。")]),v._v(" "),a("p",[v._v("泛型只在编译阶段有效。在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，只在编译阶段有效。在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。")]),v._v(" "),a("p",[v._v("泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。")]),v._v(" "),a("p",[v._v("注：JDK 1.8 以后，接口里可以有静态方法和方法体了。")]),v._v(" "),a("p",[v._v('注：JDK 1.8 以后，接口允许包含具体实现的方法，该方法称为"默认方法"，默认方法使用 default 关键字修饰。更多内容可参考 Java 8 默认方法。')]),v._v(" "),a("p",[v._v("注：JDK 1.9 以后，允许将方法定义为 private，使得某些复用的代码不会把方法暴露出去。更多内容可参考 Java 9 私有接口方法。")])])}),[],!1,null,null,null);a.default=r.exports}}]);